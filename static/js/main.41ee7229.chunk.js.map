{"version":3,"sources":["components/ImageDisplay/ImageDisplay.js","components/Search/Search.js","components/NavbarComponent/NavbarComponent.js","App.js","serviceWorker.js","index.js"],"names":["ImageDisplay","state","open","currentImage","handleOpen","img","setState","handleClose","imageListContent","images","this","props","cols","map","title","tags","id","subtitle","user","actionIcon","color","onClick","largeImageURL","src","style","cursor","alt","actions","label","primary","modal","onRequestClose","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","event","inputData","target","value","completeUrl","axios","get","then","response","data","hits","catch","err","console","log","onAmountChange","index","margin","name","onChange","floatingLabelText","fullWidth","primaryText","length","NavbarComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.41ee7229.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  GridList,\r\n  GridTile,\r\n  IconButton,\r\n  FlatButton,\r\n  Dialog,\r\n} from \"material-ui\";\r\nimport { ActionZoomIn } from \"material-ui/svg-icons\";\r\n\r\nclass ImageDisplay extends Component {\r\n  state = {\r\n    open: false,\r\n    currentImage: \"\",\r\n  };\r\n  handleOpen = (img) => {\r\n    this.setState({\r\n      currentImage: img,\r\n      open: true,\r\n    });\r\n  };\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    });\r\n  };\r\n  render() {\r\n    let imageListContent;\r\n    const { images } = this.props;\r\n    if (images) {\r\n      imageListContent = (\r\n        <GridList cols={3}>\r\n          {images.map((img) => (\r\n            <GridTile\r\n              title={img.tags}\r\n              id={img.id}\r\n              subtitle={\r\n                <span>\r\n                  by <strong>{img.user}</strong>\r\n                </span>\r\n              }\r\n              actionIcon={\r\n                <IconButton>\r\n                  <ActionZoomIn\r\n                    color=\"white\"\r\n                    onClick={() => this.handleOpen(img.largeImageURL)}\r\n                  />\r\n                </IconButton>\r\n              }\r\n            >\r\n              <img src={img.largeImageURL} style={{cursor: 'pointer'}} onClick={() => this.handleOpen(img.largeImageURL)} alt=\"\" />\r\n            </GridTile>\r\n          ))}\r\n        </GridList>\r\n      );\r\n    } else {\r\n      imageListContent = <div>Minnions</div>;\r\n    }\r\n    const actions = [\r\n      <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />,\r\n    ];\r\n    return (\r\n      <div>\r\n        {imageListContent}{\" \"}\r\n        <Dialog\r\n          actions={actions}\r\n          modal={false}\r\n          open={this.state.open}\r\n          onRequestClose={this.handleClose}\r\n        >\r\n          <img src={this.state.currentImage} alt=\"\" style={{ width: \"100%\" }} />\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nImageDisplay.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ImageDisplay;\r\n","import React, { Component } from \"react\";\r\nimport { TextField, SelectField, MenuItem } from \"material-ui\";\r\nimport axios from \"axios\";\r\nimport ImageDisplay from \"../ImageDisplay/ImageDisplay\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchText: \"\",\r\n    amount: 15,\r\n    apiUrl: \"https://pixabay.com/api\",\r\n    apiKey: \"16727117-4c10234df8be5e8a1fc6fb38f\",\r\n    images: [],\r\n  };\r\n  onTextChange = (event) => {\r\n    const inputData = event.target.value;\r\n    this.setState({ searchText: inputData }, () => {\r\n      if (inputData === \"\") {\r\n        this.setState({ images: [] });\r\n      } else {\r\n        const completeUrl = `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`;\r\n        axios\r\n          .get(completeUrl)\r\n          .then((response) => {\r\n            this.setState({ images: response.data.hits });\r\n          })\r\n          .catch((err) => {\r\n            console.log('e')\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  onAmountChange = (event, index, value) => {\r\n    this.setState({ amount: value });\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{ margin: 2 }}>\r\n        <TextField\r\n          name=\"Search pictures\"\r\n          value={this.state.searchText}\r\n          onChange={this.onTextChange}\r\n          floatingLabelText=\"Search...\"\r\n          fullWidth={true}\r\n        />\r\n        <br />\r\n        <SelectField\r\n          name=\"amount\"\r\n          floatingLabelText=\"Amount\"\r\n          value={this.state.amount}\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <MenuItem value={5} primaryText=\"05\" />\r\n          <MenuItem value={10} primaryText=\"10\" />\r\n          <MenuItem value={15} primaryText=\"15\" />\r\n          <MenuItem value={30} primaryText=\"30\" />\r\n          <MenuItem value={50} primaryText=\"50\" />\r\n        </SelectField>\r\n        <br />\r\n        {this.state.images.length <= 0 ? null : (\r\n          <ImageDisplay images={this.state.images} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { AppBar } from \"material-ui\";\r\nimport '../../App.css'\r\nconst NavbarComponent = () => {\r\n\r\n  return (\r\n    <div>\r\n      <AppBar title=\"Pix Finder\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavbarComponent;\r\n","import React from \"react\";\nimport Search from './components/Search/Search'\nimport \"./App.css\";\nimport { MuiThemeProvider } from \"material-ui/styles\";\nimport NavbarComponent from \"./components/NavbarComponent/NavbarComponent\";\n\nfunction App() {\n\n  return (\n    <MuiThemeProvider>\n      <div>\n        <NavbarComponent />\n        <Search />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}